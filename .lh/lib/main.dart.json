{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1669663988147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1669664028727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,8 @@\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       title: 'Flutter Demo',\n       theme: ThemeData(\n-        // This is the theme of your application.\n-        //\n-        // Try running your application with \"flutter run\". You'll see the\n-        // application has a blue toolbar. Then, without quitting the app, try\n-        // changing the primarySwatch below to Colors.green and then invoke\n-        // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n-        // or simply save your changes to \"hot reload\" in a Flutter IDE).\n-        // Notice that the counter didn't reset back to zero; the application\n-        // is not restarted.\n         primarySwatch: Colors.blue,\n       ),\n       home: const MyHomePage(title: 'Flutter Demo Home Page'),\n     );\n@@ -31,17 +22,8 @@\n \n class MyHomePage extends StatefulWidget {\n   const MyHomePage({super.key, required this.title});\n \n-  // This widget is the home page of your application. It is stateful, meaning\n-  // that it has a State object (defined below) that contains fields that affect\n-  // how it looks.\n-\n-  // This class is the configuration for the state. It holds the values (in this\n-  // case the title) provided by the parent (in this case the App widget) and\n-  // used by the build method of the State. Fields in a Widget subclass are\n-  // always marked \"final\".\n-\n   final String title;\n \n   @override\n   State<MyHomePage> createState() => _MyHomePageState();\n@@ -51,49 +33,20 @@\n   int _counter = 0;\n \n   void _incrementCounter() {\n     setState(() {\n-      // This call to setState tells the Flutter framework that something has\n-      // changed in this State, which causes it to rerun the build method below\n-      // so that the display can reflect the updated values. If we changed\n-      // _counter without calling setState(), then the build method would not be\n-      // called again, and so nothing would appear to happen.\n       _counter++;\n     });\n   }\n \n   @override\n   Widget build(BuildContext context) {\n-    // This method is rerun every time setState is called, for instance as done\n-    // by the _incrementCounter method above.\n-    //\n-    // The Flutter framework has been optimized to make rerunning build methods\n-    // fast, so that you can just rebuild anything that needs updating rather\n-    // than having to individually change instances of widgets.\n     return Scaffold(\n       appBar: AppBar(\n-        // Here we take the value from the MyHomePage object that was created by\n-        // the App.build method, and use it to set our appbar title.\n         title: Text(widget.title),\n       ),\n       body: Center(\n-        // Center is a layout widget. It takes a single child and positions it\n-        // in the middle of the parent.\n         child: Column(\n-          // Column is also a layout widget. It takes a list of children and\n-          // arranges them vertically. By default, it sizes itself to fit its\n-          // children horizontally, and tries to be as tall as its parent.\n-          //\n-          // Invoke \"debug painting\" (press \"p\" in the console, choose the\n-          // \"Toggle Debug Paint\" action from the Flutter Inspector in Android\n-          // Studio, or the \"Toggle Debug Paint\" command in Visual Studio Code)\n-          // to see the wireframe for each widget.\n-          //\n-          // Column has various properties to control how it sizes itself and\n-          // how it positions its children. Here we use mainAxisAlignment to\n-          // center the children vertically; the main axis here is the vertical\n-          // axis because Columns are vertical (the cross axis would be\n-          // horizontal).\n           mainAxisAlignment: MainAxisAlignment.center,\n           children: <Widget>[\n             const Text(\n               'You have pushed the button this many times:',\n"
                },
                {
                    "date": 1669664117023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,16 @@\n   // This widget is the root of your application.\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n-      title: 'Flutter Demo',\n+      debugShowCheckedModeBanner: false,\n+      title: 'Material3 Design Implementation',\n+      // navigatorKey: locator<NavigationService>().navigationKey,\n       theme: ThemeData(\n         primarySwatch: Colors.blue,\n+        useMaterial3: true,\n       ),\n-      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n+      // onGenerateRoute: Router.generateRoute,\n     );\n   }\n }\n \n"
                },
                {
                    "date": 1669664155832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import 'package:flutter/material.dart';\n+import 'package:flutter/material.dart' hide Router;\n \n void main() {\n   runApp(const MyApp());\n }\n"
                },
                {
                    "date": 1669664531771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,51 +21,4 @@\n       // onGenerateRoute: Router.generateRoute,\n     );\n   }\n }\n-\n-class MyHomePage extends StatefulWidget {\n-  const MyHomePage({super.key, required this.title});\n-\n-  final String title;\n-\n-  @override\n-  State<MyHomePage> createState() => _MyHomePageState();\n-}\n-\n-class _MyHomePageState extends State<MyHomePage> {\n-  int _counter = 0;\n-\n-  void _incrementCounter() {\n-    setState(() {\n-      _counter++;\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        title: Text(widget.title),\n-      ),\n-      body: Center(\n-        child: Column(\n-          mainAxisAlignment: MainAxisAlignment.center,\n-          children: <Widget>[\n-            const Text(\n-              'You have pushed the button this many times:',\n-            ),\n-            Text(\n-              '$_counter',\n-              style: Theme.of(context).textTheme.headline4,\n-            ),\n-          ],\n-        ),\n-      ),\n-      floatingActionButton: FloatingActionButton(\n-        onPressed: _incrementCounter,\n-        tooltip: 'Increment',\n-        child: const Icon(Icons.add),\n-      ), // This trailing comma makes auto-formatting nicer for build methods.\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1669664744352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:exhibition_task/route/route.dart';\n import 'package:flutter/material.dart' hide Router;\n \n void main() {\n   runApp(const MyApp());\n@@ -17,8 +18,8 @@\n       theme: ThemeData(\n         primarySwatch: Colors.blue,\n         useMaterial3: true,\n       ),\n-      // onGenerateRoute: Router.generateRoute,\n+      onGenerateRoute: Router.generateRoute,\n     );\n   }\n }\n"
                },
                {
                    "date": 1669664776979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       debugShowCheckedModeBanner: false,\n-      title: 'Material3 Design Implementation',\n+      title: 'Exhibition List Task',\n       // navigatorKey: locator<NavigationService>().navigationKey,\n       theme: ThemeData(\n         primarySwatch: Colors.blue,\n         useMaterial3: true,\n"
                },
                {
                    "date": 1669665049270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n       title: 'Exhibition List Task',\n       // navigatorKey: locator<NavigationService>().navigationKey,\n       theme: ThemeData(\n         primarySwatch: Colors.blue,\n-        useMaterial3: true,\n+        // useMaterial3: true,\n       ),\n       onGenerateRoute: Router.generateRoute,\n     );\n   }\n"
                },
                {
                    "date": 1669665059605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n       title: 'Exhibition List Task',\n       // navigatorKey: locator<NavigationService>().navigationKey,\n       theme: ThemeData(\n         primarySwatch: Colors.blue,\n-        // useMaterial3: true,\n+        useMaterial3: true,\n       ),\n       onGenerateRoute: Router.generateRoute,\n     );\n   }\n"
                },
                {
                    "date": 1669665075767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n \n class MyApp extends StatelessWidget {\n   const MyApp({super.key});\n \n-  // This widget is the root of your application.\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       debugShowCheckedModeBanner: false,\n"
                },
                {
                    "date": 1669673605382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,15 @@\n import 'package:exhibition_task/route/route.dart';\n+import 'package:exhibition_task/view_models/exhibit_view_model.dart';\n import 'package:flutter/material.dart' hide Router;\n+import 'package:provider/provider.dart';\n \n void main() {\n-  runApp(const MyApp());\n+  runApp(MultiProvider(\n+    providers: [\n+      ChangeNotifierProvider<ExhibitionModel>(create: (_) => ExhibitionModel())\n+    ],\n+  ));\n }\n \n class MyApp extends StatelessWidget {\n   const MyApp({super.key});\n"
                },
                {
                    "date": 1669674009423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n import 'package:exhibition_task/route/route.dart';\n+import 'package:exhibition_task/utils/locator.dart';\n import 'package:exhibition_task/view_models/exhibit_view_model.dart';\n import 'package:flutter/material.dart' hide Router;\n import 'package:provider/provider.dart';\n \n-void main() {\n+void main() async {\n+  setupLocator();\n   runApp(MultiProvider(\n     providers: [\n       ChangeNotifierProvider<ExhibitionModel>(create: (_) => ExhibitionModel())\n     ],\n"
                },
                {
                    "date": 1669674270371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,11 @@\n import 'package:provider/provider.dart';\n \n void main() async {\n   setupLocator();\n-  runApp(MultiProvider(\n-    providers: [\n-      ChangeNotifierProvider<ExhibitionModel>(create: (_) => ExhibitionModel())\n-    ],\n-  ));\n+  runApp(MultiProvider(providers: [\n+    ChangeNotifierProvider<ExhibitionModel>(create: (_) => ExhibitionModel())\n+  ], child: const MyApp()));\n }\n \n class MyApp extends StatelessWidget {\n   const MyApp({super.key});\n"
                },
                {
                    "date": 1669687740305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,5 @@\n-import 'package:exhibition_task/route/route.dart';\n-import 'package:exhibition_task/utils/locator.dart';\n-import 'package:exhibition_task/view_models/exhibit_view_model.dart';\n-import 'package:flutter/material.dart' hide Router;\n-import 'package:provider/provider.dart';\n+import 'package:exhibition_task/export.dart';\n \n void main() async {\n   setupLocator();\n   runApp(MultiProvider(providers: [\n"
                },
                {
                    "date": 1669724291729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       debugShowCheckedModeBanner: false,\n       title: 'Exhibition List Task',\n-      // navigatorKey: locator<NavigationService>().navigationKey,\n       theme: ThemeData(\n         primarySwatch: Colors.blue,\n         useMaterial3: true,\n       ),\n"
                }
            ],
            "date": 1669663988147,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        // This is the theme of your application.\n        //\n        // Try running your application with \"flutter run\". You'll see the\n        // application has a blue toolbar. Then, without quitting the app, try\n        // changing the primarySwatch below to Colors.green and then invoke\n        // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n        // or simply save your changes to \"hot reload\" in a Flutter IDE).\n        // Notice that the counter didn't reset back to zero; the application\n        // is not restarted.\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  // This widget is the home page of your application. It is stateful, meaning\n  // that it has a State object (defined below) that contains fields that affect\n  // how it looks.\n\n  // This class is the configuration for the state. It holds the values (in this\n  // case the title) provided by the parent (in this case the App widget) and\n  // used by the build method of the State. Fields in a Widget subclass are\n  // always marked \"final\".\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      // This call to setState tells the Flutter framework that something has\n      // changed in this State, which causes it to rerun the build method below\n      // so that the display can reflect the updated values. If we changed\n      // _counter without calling setState(), then the build method would not be\n      // called again, and so nothing would appear to happen.\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // This method is rerun every time setState is called, for instance as done\n    // by the _incrementCounter method above.\n    //\n    // The Flutter framework has been optimized to make rerunning build methods\n    // fast, so that you can just rebuild anything that needs updating rather\n    // than having to individually change instances of widgets.\n    return Scaffold(\n      appBar: AppBar(\n        // Here we take the value from the MyHomePage object that was created by\n        // the App.build method, and use it to set our appbar title.\n        title: Text(widget.title),\n      ),\n      body: Center(\n        // Center is a layout widget. It takes a single child and positions it\n        // in the middle of the parent.\n        child: Column(\n          // Column is also a layout widget. It takes a list of children and\n          // arranges them vertically. By default, it sizes itself to fit its\n          // children horizontally, and tries to be as tall as its parent.\n          //\n          // Invoke \"debug painting\" (press \"p\" in the console, choose the\n          // \"Toggle Debug Paint\" action from the Flutter Inspector in Android\n          // Studio, or the \"Toggle Debug Paint\" command in Visual Studio Code)\n          // to see the wireframe for each widget.\n          //\n          // Column has various properties to control how it sizes itself and\n          // how it positions its children. Here we use mainAxisAlignment to\n          // center the children vertically; the main axis here is the vertical\n          // axis because Columns are vertical (the cross axis would be\n          // horizontal).\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text(\n              'You have pushed the button this many times:',\n            ),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.headline4,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ), // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n"
        }
    ]
}